knitr::opts_chunk$set(echo = TRUE)
setwd("~/Box Sync/BaskingShark_behaviors")
ID <- 3
data <- read.csv(paste0("Shark ", ID, "_CATS_behaviors.csv"))
head(data, 20)
class(data$Time)
summary(data)
#clean up CATS Cam data so we only get what we need
#data <- data[,c("Time", "Pressure...channel..1", "Sway..g.", "Surge..g.", "Heave..g.", "Light.intensity...channel..1", "Temperature.ext....channel..1", "ODBA")]
# need to convert data values to meters
head(data)
data$Pressure...channel..1 <- (data$Pressure...channel..1*.001)+.3
summary(data$Pressure...channel..1) # got this information from Heather Vance
# This is at 20 Hz. We want to extract every 20th value and get rid of milliseconds
data2 <- data[seq(1, nrow(data), 20),]
vector <- as.character(data2$Time)
data2$Time <- substr(vector, 1, 8)
head(data2$Time)
head(data2)
# make into chron object so that we can merge the behavioral data according to timestamp
# needed to make as a character first so that chron recognizes the format
#install.packages("chron")
library(chron)
data2$chron<- chron(times. = data2$Time, format ="hh:mm:ss", out.format = "h:m:s")
data2$chron
class(data2$chron)
## need to keep magnetometer reading, but which one?
# let's search out the signal
data.trash <- data2[200:400,]
summary(data.trash)
nrow(data.trash)
summary(data.trash$Pressure...channel..1)
plot(data.trash$Compass..1....channel..1~data.trash$chron, type="l")
plot(data.trash$Compass..1....channel..2~data.trash$chron, type="l")
plot(data.trash$Compass..1....channel..3~data.trash$chron, type="l")
plot(data.trash$Gyroscope..2....channel..1~data.trash$chron, type="l")
plot(data.trash$Gyroscope..2....channel..2~data.trash$chron, type="l")
plot(data.trash$Gyroscope..2....channel..3~data.trash$chron, type="l")
plot(data2$Gyroscope..2....channel..3~data2$chron, type="l")
##########################################
### let's read in the behavioral data now
##########################################
behavior <- read.csv("CATS_S3_Events_csv.csv")
head(behavior)
class(behavior$Time)
# use this function (found on internet) to generate time values from the seconds values in the behavior data
dhms <- function(t){
paste(t %/% (60*60*24)
,paste(formatC(t %/% (60*60) %% 24, width = 2, format = "d", flag = "0")
,formatC(t %/% 60 %% 60, width = 2, format = "d", flag = "0")
,formatC(t %% 60, width = 2, format = "d", flag = "0")
,sep = ":"
)
)
}
behavior$Time <- dhms(behavior$Time)
head(behavior$Time)
# clean it up
vector2 <- as.character(behavior$Time)
behavior$Time <- substr(vector2, 3, 10) #this allows you to get rid of objects within a character string (only want the 3-10 values in the character string)
head(behavior$Time)
# now make this into a chron object
behavec <- chron(times. = behavior$Time, format ="hh:mm:ss", out.format = "h:m:s")
head(behavec)
#### We want to add all of these times to the start time from the data
behavior$Time2 <- behavec + data2$chron[1]
head(behavior$Time2)
head(behavior)
## clean up data so that we only have behavior, comments and time2 columns
behavior2 <- behavior[,(3:5)]
head(behavior2)
colnames(behavior2) <- c("Behavior", "Comment", "chron")
head(behavior2)
##############################
# Check out all of the columns in both datasets to make sure we can merge them #
############################
# CATS data
head(data2) # going to merge using the "chron" column
# behavior data
head(behavior2) #going to merge using "chron" column
# now to join
library(tidyverse)
library(dplyr)
fulldat <- left_join(data2, behavior2, by= c("chron"="chron"))
head(fulldat)
fulldat <- fulldat[,-1]
head(fulldat, 200)
#note that accelerometer values are in g
colnames(fulldat) <- c("Pressure", "Sway", "Surge", "Heave", "Light", "Temperature", "ODBA", "Time", "Behavior", "Comments")
head(fulldat)
# get rid of the top rows before the behaviors begin
head(fulldat, 200)
fulldat <- fulldat[126:nrow(fulldat),]
head(fulldat)
# visualize the pressure data to make sure calibration makes sense
plot(fulldat$Time, (-fulldat$Pressure), type = "l")
# see an outlier at 86 m
fulldat <- fulldat[fulldat$Pressure<86,]
summary(fulldat$Pressure)
plot(fulldat$Time, (-fulldat$Pressure), type = "l")
head(fulldat)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Box Sync/BaskingShark_behaviors")
ID <- 3
data <- read.csv(paste0("Shark ", ID, "_CATS_behaviors.csv"))
head(data, 20)
class(data$Time)
summary(data)
#clean up CATS Cam data so we only get what we need
#data <- data[,c("Time", "Pressure...channel..1", "Sway..g.", "Surge..g.", "Heave..g.", "Light.intensity...channel..1", "Temperature.ext....channel..1", "ODBA")]
# need to convert data values to meters
head(data)
data$Pressure...channel..1 <- (data$Pressure...channel..1*.001)+.3
summary(data$Pressure...channel..1) # got this information from Heather Vance
# This is at 20 Hz. We want to extract every 20th value and get rid of milliseconds
data2 <- data[seq(1, nrow(data), 20),]
vector <- as.character(data2$Time)
data2$Time <- substr(vector, 1, 8)
head(data2$Time)
head(data2)
#install.packages("chron")
library(chron)
data2$chron<- chron(times. = data2$Time, format ="hh:mm:ss", out.format = "h:m:s")
data2$chron
class(data2$chron)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Box Sync/BaskingShark_behaviors")
ID <- 3
data <- read.csv(paste0("Shark ", ID, "_CATS_behaviors.csv"))
head(data, 20)
class(data$Time)
summary(data)
#clean up CATS Cam data so we only get what we need
#data <- data[,c("Time", "Pressure...channel..1", "Sway..g.", "Surge..g.", "Heave..g.", "Light.intensity...channel..1", "Temperature.ext....channel..1", "ODBA")]
# need to convert data values to meters
head(data)
data$Pressure...channel..1 <- (data$Pressure...channel..1*.001)+.3
summary(data$Pressure...channel..1) # got this information from Heather Vance
# This is at 20 Hz. We want to extract every 20th value and get rid of milliseconds
data2 <- data[seq(1, nrow(data), 20),]
vector <- as.character(data2$Time)
data2$Time <- substr(vector, 1, 8)
head(data2$Time)
head(data2)
# make into chron object so that we can merge the behavioral data according to timestamp
# needed to make as a character first so that chron recognizes the format
#install.packages("chron")
library(chron)
data2$chron<- chron(times. = data2$Time, format ="hh:mm:ss", out.format = "h:m:s")
data2$chron
class(data2$chron)
## need to keep magnetometer reading, but which one?
# let's search out the signal
# data.trash <- data2[200:400,]
# summary(data.trash)
# nrow(data.trash)
# summary(data.trash$Pressure...channel..1)
# plot(data.trash$Compass..1....channel..1~data.trash$chron, type="l")
# plot(data.trash$Compass..1....channel..2~data.trash$chron, type="l")
# plot(data.trash$Compass..1....channel..3~data.trash$chron, type="l")
# plot(data.trash$Gyroscope..2....channel..1~data.trash$chron, type="l")
# plot(data.trash$Gyroscope..2....channel..2~data.trash$chron, type="l")
# plot(data.trash$Gyroscope..2....channel..3~data.trash$chron, type="l")
#
# plot(data2$Gyroscope..2....channel..3~data2$chron, type="l")
##########################################
### let's read in the behavioral data now
##########################################
behavior <- read.csv("CATS_S3_Events_csv.csv")
head(behavior)
class(behavior$Time)
# use this function (found on internet) to generate time values from the seconds values in the behavior data
dhms <- function(t){
paste(t %/% (60*60*24)
,paste(formatC(t %/% (60*60) %% 24, width = 2, format = "d", flag = "0")
,formatC(t %/% 60 %% 60, width = 2, format = "d", flag = "0")
,formatC(t %% 60, width = 2, format = "d", flag = "0")
,sep = ":"
)
)
}
behavior$Time <- dhms(behavior$Time)
head(behavior$Time)
# clean it up
vector2 <- as.character(behavior$Time)
behavior$Time <- substr(vector2, 3, 10) #this allows you to get rid of objects within a character string (only want the 3-10 values in the character string)
head(behavior$Time)
# now make this into a chron object
behavec <- chron(times. = behavior$Time, format ="hh:mm:ss", out.format = "h:m:s")
head(behavec)
#### We want to add all of these times to the start time from the data
behavior$Time2 <- behavec + data2$chron[1]
head(behavior$Time2)
head(behavior)
## clean up data so that we only have behavior, comments and time2 columns
behavior2 <- behavior[,(3:5)]
head(behavior2)
colnames(behavior2) <- c("Behavior", "Comment", "chron")
##############################
# Check out all of the columns in both datasets to make sure we can merge them #
############################
# CATS data
head(data2) # going to merge using the "chron" column
# behavior data
head(behavior2) #g
# now to join
library(tidyverse)
library(dplyr)
fulldat <- left_join(data2, behavior2, by= c("chron"="chron"))
head(fulldat)
fulldat <- fulldat[,-1]
head(fulldat, 200)
# now to join
library(tidyverse)
library(dplyr)
fulldat <- left_join(data2, behavior2, by= c("chron"="chron"))
head(fulldat)
fulldat <- fulldat[,-1]
head(fulldat, 200)
head(fulldat, 200)
#note that accelerometer values are in g
colnames(fulldat) <- c("Pressure", "Sway", "Surge", "Heave", "Light", "Temperature", "ODBA", "Time", "Behavior", "Comments")
head(fulldat)
# get rid of the top rows before the behaviors begin
head(fulldat, 200)
fulldat <- fulldat[126:nrow(fulldat),]
head(fulldat)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Box Sync/BaskingShark_behaviors")
ID <- 3
data <- read.csv(paste0("Shark ", ID, "_CATS_behaviors.csv"))
head(data, 20)
class(data$Time)
summary(data)
#clean up CATS Cam data so we only get what we need
#data <- data[,c("Time", "Pressure...channel..1", "Sway..g.", "Surge..g.", "Heave..g.", "Light.intensity...channel..1", "Temperature.ext....channel..1", "ODBA")]
# need to convert data values to meters
head(data)
data$Pressure...channel..1 <- (data$Pressure...channel..1*.001)+.3
summary(data$Pressure...channel..1) # got this information from Heather Vance
# This is at 20 Hz. We want to extract every 20th value and get rid of milliseconds
data2 <- data[seq(1, nrow(data), 20),]
vector <- as.character(data2$Time)
data2$Time <- substr(vector, 1, 8)
head(data2$Time)
head(data2)
# make into chron object so that we can merge the behavioral data according to timestamp
# needed to make as a character first so that chron recognizes the format
#install.packages("chron")
library(chron)
data2$chron<- chron(times. = data2$Time, format ="hh:mm:ss", out.format = "h:m:s")
data2$chron
class(data2$chron)
## need to keep magnetometer reading, but which one?
# let's search out the signal
# data.trash <- data2[200:400,]
# summary(data.trash)
# nrow(data.trash)
# summary(data.trash$Pressure...channel..1)
# plot(data.trash$Compass..1....channel..1~data.trash$chron, type="l")
# plot(data.trash$Compass..1....channel..2~data.trash$chron, type="l")
# plot(data.trash$Compass..1....channel..3~data.trash$chron, type="l")
# plot(data.trash$Gyroscope..2....channel..1~data.trash$chron, type="l")
# plot(data.trash$Gyroscope..2....channel..2~data.trash$chron, type="l")
# plot(data.trash$Gyroscope..2....channel..3~data.trash$chron, type="l")
#
# plot(data2$Gyroscope..2....channel..3~data2$chron, type="l")
head(fulldat)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Box Sync/BaskingShark_behaviors")
ID <- 3
data <- read.csv(paste0("Shark ", ID, "_CATS_behaviors.csv"))
head(data, 20)
class(data$Time)
summary(data)
#clean up CATS Cam data so we only get what we need
#data <- data[,c("Time", "Pressure...channel..1", "Sway..g.", "Surge..g.", "Heave..g.", "Light.intensity...channel..1", "Temperature.ext....channel..1", "ODBA")]
# need to convert data values to meters
head(data)
data$Pressure...channel..1 <- (data$Pressure...channel..1*.001)+.3
summary(data$Pressure...channel..1) # got this information from Heather Vance
# This is at 20 Hz. We want to extract every 20th value and get rid of milliseconds
data2 <- data[seq(1, nrow(data), 20),]
vector <- as.character(data2$Time)
data2$Time <- substr(vector, 1, 8)
head(data2$Time)
head(data2)
# make into chron object so that we can merge the behavioral data according to timestamp
# needed to make as a character first so that chron recognizes the format
#install.packages("chron")
library(chron)
data2$chron<- chron(times. = data2$Time, format ="hh:mm:ss", out.format = "h:m:s")
data2$chron
class(data2$chron)
behavior <- read.csv("CATS_S3_Events_csv.csv")
head(behavior)
class(behavior$Time)
# use this function (found on internet) to generate time values from the seconds values in the behavior data
dhms <- function(t){
paste(t %/% (60*60*24)
,paste(formatC(t %/% (60*60) %% 24, width = 2, format = "d", flag = "0")
,formatC(t %/% 60 %% 60, width = 2, format = "d", flag = "0")
,formatC(t %% 60, width = 2, format = "d", flag = "0")
,sep = ":"
)
)
}
behavior$Time <- dhms(behavior$Time)
head(behavior$Time)
# clean it up
vector2 <- as.character(behavior$Time)
behavior$Time <- substr(vector2, 3, 10) #this allows you to get rid of objects within a character string (only want the 3-10 values in the character string)
head(behavior$Time)
# now make this into a chron object
behavec <- chron(times. = behavior$Time, format ="hh:mm:ss", out.format = "h:m:s")
head(behavec)
#### We want to add all of these times to the start time from the data
behavior$Time2 <- behavec + data2$chron[1]
head(behavior$Time2)
head(behavior)
## clean up data so that we only have behavior, comments and time2 columns
behavior2 <- behavior[,(3:5)]
head(behavior2)
colnames(behavior2) <- c("Behavior", "Comment", "chron")
head(behavior2)
##############################
# Check out all of the columns in both datasets to make sure we can merge them #
############################
# CATS data
head(data2) # going to merge using the "chron" column
# behavior data
head(behavior2) #going to merge using "chron" column
# now to join
library(tidyverse)
library(dplyr)
fulldat <- left_join(data2, behavior2, by= c("chron"="chron"))
head(fulldat)
fulldat <- fulldat[,-1]
head(fulldat, 200)
summary(fulldat)
colnames(fulldat) <- c("Time", "Pressure", "Compass1", "Compass2", "Compass3", "AccelSway", "Sway.g.", "AccelSurge", "Surge.g.", "AccelHeave", "Heave.g.", "Temperature", "Gyro1", "Gyro2", "Gyro3", "Accel1", "Accel2", "Temp2", "Light", "TempExt", "ODBA", "Time", "Behavior", "Comments")
head(fulldat)
colnames(fulldat) <- c("Time", "Pressure", "Compass1", "Compass2", "Compass3", "AccelSway", "Sway.g.", "AccelSurge", "Surge.g.", "AccelHeave", "Heave.g.", "Temperature", "Gyro1", "Gyro2", "Gyro3", "Accel1", "Accel2", "Accel3", "Temp2", "Light", "TempExt", "ODBA", "Time", "Behavior", "Comments")
head(fulldat)
get rid of the top rows before the behaviors begin
# get rid of the top rows before the behaviors begin
head(fulldat, 200)
fulldat <- fulldat[126:nrow(fulldat),]
head(fulldat)
# visualize the pressure data to make sure calibration makes sense
plot(fulldat$Time, (-fulldat$Pressure), type = "l")
# see an outlier at 86 m
fulldat <- fulldat[fulldat$Pressure<86,]
summary(fulldat$Pressure)
plot(fulldat$Time, (-fulldat$Pressure), type = "l")
head(fulldat)
# for loop for filling in behaviors
for (i in 1:nrow(fulldat)) {
if(is.na(fulldat[i,]$Behavior)==TRUE){
fulldat[i,]$Behavior <- fulldat[(i-1),]$Behavior
}
}
summary(fulldat)
#@@@@ Now to clean up data so that we only have depths below 2 meters
fulldat2 <- fulldat[abs(fulldat$Pressure)>= 2]
#@@@@ Now to clean up data so that we only have depths below 2 meters
fulldat2 <- fulldat[abs(fulldat$Pressure)>=2,]
summary(fulldat2$Pressure)
plot(fulldat2$Pressure, fulldat2$Time)
plot(fulldat2$Pressure~fulldat2$Time)
plot(fulldat2$Pressure, fulldat2$Time, type ="l")
plot(fulldat2$Pressure~fulldat2$Time, type ="l")
plot(-(fulldat2$Pressure)~fulldat2$Time, type ="l")
plot(-(fulldat2$Pressure)~fulldat2$Time, type ="p")
plot(-(fulldat2$Pressure)~fulldat2$Time, type ="p", size=.5)
plot(-(fulldat2$Pressure)~fulldat2$Time, type ="p", cex=.2
plot(-(fulldat2$Pressure)~fulldat2$Time, type ="p", cex=.2)
plot(-(fulldat2$Pressure)~fulldat2$Time, type ="p", cex=.2)
#@@@@ Now to clean up data so that we only have depths below 2 meters
fulldat2 <- fulldat[abs(fulldat$Pressure)>=1,]
summary(fulldat2$Pressure)
plot(-(fulldat2$Pressure)~fulldat2$Time, type ="p", cex=.2)
#@@@@ Now to clean up data so that we only have depths below 2 meters
fulldat2 <- fulldat[abs(fulldat$Pressure)>=2,]
summary(fulldat2$Pressure)
plot(-(fulldat2$Pressure)~fulldat2$Time, type ="p", cex=.2)
#@@@@ Now to clean up data so that we only have depths below 2 meters
nrow(fulldat)
fulldat1 <- fulldat[abs(fulldat$Pressure)>=2,]
summary(fulldat1$Pressure)
plot(-(fulldat1$Pressure)~fulldat1$Time, type ="p", cex=.2)
nrow(fulldat1)
fulldat1 <- fulldat[abs(fulldat$Pressure)>=1,]
summary(fulldat1$Pressure)
plot(-(fulldat1$Pressure)~fulldat1$Time, type ="p", cex=.2)
nrow(fulldat1)
fulldat1 <- fulldat[abs(fulldat$Pressure)>=1,]
summary(fulldat1$Pressure)
plot(-(fulldat1$Pressure)~fulldat1$Time, type ="p", cex=.2)
nrow(fulldat1) #4820
plot(-(fulldat1$Pressure)~fulldat1$Time, type ="p", cex=.2)
plot(-(fulldat1$Pressure)~fulldat1$Time, type ="p", cex=.2)
fulldat2 <- fulldat[abs(fulldat$Pressure)>=2,]
summary(fulldat2$Pressure)
plot(-(fulldat2$Pressure)~fulldat2$Time, type ="p", cex=.2)
nrow(fulldat2) #35
plot(-(fulldat1$Pressure)~fulldat1$Time, type ="p", cex=.2)
plot(-(fulldat2$Pressure)~fulldat2$Time, type ="p", cex=.2)
fulldat.3 <- fulldat[fulldat$Behavior!="Out of Water",]
summary(fulldat.3$Behavior)
fulldat.3 <- fulldat[fulldat$Behavior!="Out of Water",]
summary(fulldat.3$Behavior)
summary(fulldat.3$Pressure)
plot(-(fulldat.
(fulldat.3$Pressure)
plot(-(fulldat.3$Pressure)~fulldat.3$Time, type ="p", cex=.2)
plot(-(fulldat.3$Pressure)~fulldat.3$Time, type ="p", cex=.2)
nrow(fulldat.3) #3541
fulldat.3 <- fulldat[fulldat$Behavior!="Out of Water",]
summary(fulldat.3$Behavior)
summary(fulldat.3$Pressure)
plot(-(fulldat.3$Pressure)~fulldat.3$Time, type ="p", cex=.2)
summary(fulldat$Behavior)
fulldat.3 <- fulldat[fulldat$Behavior!="Out of water",]
summary(fulldat.3$Behavior)
summary(fulldat.3$Pressure)
plot(-(fulldat.3$Pressure)~fulldat.3$Time, type ="p", cex=.2)
nrow(fulldat.3) #3541
plot(-(fulldat.3$Pressure)~fulldat.3$Time, type ="p", cex=.2)
#threshold = .5 m below surface
fulldat4 <- fulldat[abs(fulldat$Pressure)>=.5,]
summary(fulldat4$Pressure)
plot(-(fulldat4$Pressure)~fulldat4$Time, type ="p", cex=.2)
nrow(fulldat4)
plot(-(fulldat4$Pressure)~fulldat4$Time, type ="p", cex=.2)
